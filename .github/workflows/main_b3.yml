name: Build and deploy ASP.Net Core app to Azure Web App - B3

on:
  push:
    branches:
      - main 
      - V1
  workflow_dispatch:

jobs:
  buildAngular:
    runs-on: windows-latest
    permissions:
      contents: read
    
    env:
      PUBLISH_DIR: ${{ github.workspace }}\publish

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Angular dependencies
        working-directory: cdbWeb
        run: npm ci

      - name: Build Angular app
        working-directory: cdbWeb
        run: npm run build -- --configuration=production

      - name: Verify Angular build
        shell: pwsh
        working-directory: cdbWeb
        run: |
          $indexPath = "dist\cdb-web\browser\index.html"
          if (-not (Test-Path $indexPath)) {
              Write-Error "Angular index.html not found in dist folder!"
              exit 1
          }
          if ((Get-Item $indexPath).Length -eq 0) {
              Write-Error "Angular index.html is empty!"
              exit 1
          }

      - name: Prepare wwwroot directory
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force "B3.API\wwwroot" -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Path "B3.API\wwwroot" -Force

      - name: Copy Angular assets to wwwroot
        shell: pwsh
        run: |
          Copy-Item -Path "cdbWeb\dist\cdb-web\browser\*" -Destination "B3.API\wwwroot" -Recurse -Force
          
          # Verify copy
          $indexDest = "B3.API\wwwroot\index.html"
          if (-not (Test-Path $indexDest)) {
              Write-Error "index.html not copied to wwwroot!"
              exit 1
          }
          if ((Get-Item $indexDest).Length -eq 0) {
              Write-Error "Copied index.html is empty!"
              exit 1
          }

      - name: Upload Angular build artifact
        uses: actions/upload-artifact@v4
        with:
          name: wwwroot
          path: B3.API/wwwroot

  buildAPI:
    runs-on: windows-latest
    needs: [buildAngular]
    permissions:
      contents: read
    
    env:
      PUBLISH_DIR: ${{ github.workspace }}\publish

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with: 
          dotnet-version: '9.x'


      - name: Clean old TestResults
        shell: pwsh
        run: |
            if (Test-Path "TestResults") {
                Remove-Item -Recurse -Force "TestResults"
            }


      - name: Create TestResults Directory
        shell: pwsh
        run: New-Item -ItemType Directory -Path "TestResults" -Force

      - name: Run Tests and Collect Coverage
        shell: pwsh
        run: |
            $projects = @(
              "APITests/APITests.csproj",
              "ApplicationTests/ApplicationTests.csproj",
              "DomainTests/DomainTests.csproj"
            )

            foreach ($proj in $projects) {
              $projName = [System.IO.Path]::GetFileNameWithoutExtension($proj)
              dotnet test $proj `
                --no-build `
                --configuration Debug `
                --logger "trx;LogFileName=$projName.trx" `
                --results-directory "TestResults" `
                /p:CollectCoverage=true `
                /p:CoverletOutput="TestResults/$projName" `
                /p:CoverletOutputFormat=cobertura
            }

            Get-ChildItem -Recurse -Path TestResults -Filter *.cobertura.xml

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Add dotnet tools to PATH
        shell: pwsh
        run: echo "$env:USERPROFILE\.dotnet\tools" | Out-File -Append $env:GITHUB_PATH

      - name: Generate Coverage Report
        run: |
          reportgenerator `
            -reports:"TestResults/**/*.cobertura.xml" `
            -targetdir:"coveragereport" `
            -reporttypes:"Html;Cobertura" `
            -reportassemblyversion:Off

          if (-not (Test-Path "coveragereport/index.html")) {
              Write-Error "❌ Falha ao gerar o relatório HTML"
              exit 1
          }


      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
            name: coverage-report
            path: coveragereport


      - name: Verify Code Coverage (Solution) >= 90% 
        shell: pwsh
        run: |

            $coverageFile = Get-ChildItem -Recurse -Path "TestResults" -Filter *.cobertura.xml | Select-Object -First 1
            if (-not $coverageFile) {
              Write-Error "❌ Nenhum arquivo de cobertura encontrado!"
              exit 1
            }

            [xml]$xml = Get-Content $coverageFile.FullName

            $lineCoverage = $xml.coverage.'line-rate'
            $totalLines   = $xml.coverage.'lines-valid'
            $coveredLines = $xml.coverage.'lines-covered'

            if (-not $lineCoverage) {
              Write-Error "❌ Could not read line-rate from XML!"
              exit 1
            }

            $percent = [math]::Round([double]$lineCoverage * 100, 2)

            Write-Host "📊 Cobertura da branch: $percent%"
            Write-Host "✅ Linhas cobertas: $coveredLines / $totalLines"

            if ($percent -lt 90) {
              Write-Error "❌ Code coverage is below 90%: $percent%"
              exit 1
            }


      - name: Build .NET solution
        run: dotnet build B3.API/B3.API.sln --configuration Release

      - name: Download Angular wwwroot artifact
        uses: actions/download-artifact@v4
        with:
          name: wwwroot
          path: B3.API/wwwroot

      - name: Publish .NET application
        shell: pwsh
        run: |
          # Ensure publish directory exists and is empty
          Remove-Item -Recurse -Force "$env:PUBLISH_DIR" -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Path "$env:PUBLISH_DIR" -Force
          
          # Publish with wwwroot preservation
          dotnet publish B3.API/B3.API/B3.API.csproj `
            -c Release `
            -o "$env:PUBLISH_DIR" `
            /p:DeleteExistingFiles=false
          
          # Manually copy wwwroot if not included
          if (-not (Test-Path "$env:PUBLISH_DIR\wwwroot")) {
              Copy-Item -Path "B3.API\wwwroot" -Destination "$env:PUBLISH_DIR\wwwroot" -Recurse -Force
          }
          
          # Verify published files
          $publishedIndex = "$env:PUBLISH_DIR\wwwroot\index.html"
          if (-not (Test-Path $publishedIndex)) {
              Write-Error "index.html missing in published output!"
              Get-ChildItem "$env:PUBLISH_DIR" -Recurse
              exit 1
          }
          if ((Get-Item $publishedIndex).Length -eq 0) {
              Write-Error "Published index.html is empty!"
              exit 1
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{ env.PUBLISH_DIR }}

  deploy:
    runs-on: windows-latest
    needs: [buildAPI, buildAngular]
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read
    
    env:
      PUBLISH_DIR: ${{ github.workspace }}\publish

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: .net-app
          path: ${{ env.PUBLISH_DIR }}

      - name: Verify downloaded files
        shell: pwsh
        run: |
          $indexPath = "$env:PUBLISH_DIR\wwwroot\index.html"
          if (-not (Test-Path $indexPath)) {
              Write-Error "index.html missing in downloaded artifact!"
              exit 1
          }
          if ((Get-Item $indexPath).Length -eq 0) {
              Write-Error "Downloaded index.html is empty!"
              exit 1
          }

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_8DB310D194E549EDAEE63FFD4ACCE025 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_2A355AA9F62F4B6D8BE19857D3969D56 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_DC15C30FD6CC4D6A8B1A793499BC115F }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'B3'
          slot-name: 'Production'
          package: ${{ env.PUBLISH_DIR }}
name: Build and deploy ASP.Net Core app to Azure Web App - B3

on:
  push:
    branches:
      - main 
      - V1
  workflow_dispatch:

jobs:
  buildAngular:
    runs-on: windows-latest
    permissions:
      contents: read
    
    env:
      PUBLISH_DIR: ${{ github.workspace }}\publish

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Angular dependencies
        working-directory: cdbWeb
        run: npm ci

      - name: Build Angular app
        working-directory: cdbWeb
        run: npm run build -- --configuration=production

      - name: Verify Angular build
        shell: pwsh
        working-directory: cdbWeb
        run: |
          $indexPath = "dist\cdb-web\browser\index.html"
          if (-not (Test-Path $indexPath)) {
              Write-Error "Angular index.html not found in dist folder!"
              exit 1
          }
          if ((Get-Item $indexPath).Length -eq 0) {
              Write-Error "Angular index.html is empty!"
              exit 1
          }

      - name: Prepare wwwroot directory
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force "B3.API\wwwroot" -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Path "B3.API\wwwroot" -Force

      - name: Copy Angular assets to wwwroot
        shell: pwsh
        run: |
          Copy-Item -Path "cdbWeb\dist\cdb-web\browser\*" -Destination "B3.API\wwwroot" -Recurse -Force
          
          # Verify copy
          $indexDest = "B3.API\wwwroot\index.html"
          if (-not (Test-Path $indexDest)) {
              Write-Error "index.html not copied to wwwroot!"
              exit 1
          }
          if ((Get-Item $indexDest).Length -eq 0) {
              Write-Error "Copied index.html is empty!"
              exit 1
          }

      - name: Upload Angular build artifact
        uses: actions/upload-artifact@v4
        with:
          name: wwwroot
          path: B3.API/wwwroot

  buildAPITest:
    runs-on: windows-latest
    needs: [buildAPI]
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Create TestResults directory
        working-directory: APITests
        run: |
          New-Item -ItemType Directory -Path "./TestResults" -Force
          Write-Host "✅ Created TestResults directory at $(Get-Location)/TestResults"
        shell: pwsh

      - name: Run Tests for B3.API Project
        working-directory: APITests
        run: |
            dotnet test --configuration Release `
              /p:CollectCoverage=true `
              /p:CoverletOutputFormat=cobertura `
              /p:CoverletOutput="../TestResults/coverage.cobertura.xml" `
              /p:MergeWith="../TestResults/coverage.cobertura.xml" `
              /p:MergeOutputFormat=cobertura

      - name: Verify TestResults directory exists
        working-directory: APITests
        run: |
          if (-not (Test-Path "./TestResults")) {
            Write-Error "❌ TestResults directory not found!"
            exit 1
          }
          Write-Host "✅ TestResults directory exists"
        shell: pwsh

      - name: List TestResults contents
        working-directory: APITests
        run: |
          Write-Host "📂 Contents of TestResults:"
          Get-ChildItem -Path "./TestResults" -Recurse
          if (-not (Test-Path "./TestResults/coverage.cobertura.xml")) {
            Write-Error "❌ coverage.cobertura.xml not found!"
            exit 1
          }
        shell: pwsh

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Verify Code Coverage >= 90%
        working-directory: APITests
        run: |
          $coveragePath = "./TestResults/coverage.cobertura.xml"
          if (-not (Test-Path $coveragePath)) {
            Write-Error "❌ Coverage file not found at $coveragePath"
            exit 1
          }
          
          [xml]$xml = Get-Content $coveragePath
          $lineCoverage = $xml.coverage.'@line-rate'
          $percent = [math]::Round([double]$lineCoverage * 100, 2)
          
          Write-Host "🔍 Code coverage: $percent%"
          
          if ($percent -lt 90) {
            Write-Error "❌ Code coverage is below 90%: $percent%"
            exit 1
          }
        shell: pwsh

      - name: Upload TestResults artifact
        uses: actions/upload-artifact@v4
        with:
          name: APITestResults
          path: APITests/TestResults

  buildApplicationTests:
    runs-on: windows-latest
    needs: [buildAPI]
    permissions:
      contents: read
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Create TestResults directory
        working-directory: ApplicationTests
        run: |
          New-Item -ItemType Directory -Path "./TestResults" -Force
          Write-Host "✅ Created TestResults directory at $(Get-Location)/TestResults"
        shell: pwsh

      - name: Run Tests for B3.Application Project
        working-directory: ApplicationTests
        run: |
            dotnet test --configuration Release `
              /p:CollectCoverage=true `
              /p:CoverletOutputFormat=cobertura `
              /p:CoverletOutput="../TestResults/coverage.cobertura.xml" `
              /p:MergeWith="../TestResults/coverage.cobertura.xml" `
              /p:MergeOutputFormat=cobertura


      - name: Verify TestResults directory exists
        working-directory: ApplicationTests
        run: |
          if (-not (Test-Path "./TestResults")) {
            Write-Error "❌ TestResults directory not found!"
            exit 1
          }
          Write-Host "✅ TestResults directory exists"
        shell: pwsh

      - name: List TestResults contents
        working-directory: ApplicationTests
        run: |
          Write-Host "📂 Contents of TestResults:"
          Get-ChildItem -Path "./TestResults" -Recurse
          if (-not (Test-Path "./TestResults/coverage.cobertura.xml")) {
            Write-Error "❌ coverage.cobertura.xml not found!"
            exit 1
          }
        shell: pwsh

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Verify Code Coverage >= 90%
        working-directory: ApplicationTests
        run: |
          $coveragePath = "./TestResults/coverage.cobertura.xml"
          if (-not (Test-Path $coveragePath)) {
            Write-Error "❌ Coverage file not found at $coveragePath"
            exit 1
          }
          
          [xml]$xml = Get-Content $coveragePath
          $lineCoverage = $xml.coverage.'@line-rate'
          $percent = [math]::Round([double]$lineCoverage * 100, 2)
          
          Write-Host "🔍 Code coverage: $percent%"
          
          if ($percent -lt 90) {
            Write-Error "❌ Code coverage is below 90%: $percent%"
            exit 1
          }
        shell: pwsh

      - name: Upload TestResults artifact
        uses: actions/upload-artifact@v4
        with:
          name: ApplicationTestResults
          path: ApplicationTests/TestResults

  buildDomainTests:
      runs-on: windows-latest
      needs: [buildAPI]
      permissions:
        contents: read
  
      steps:
        - uses: actions/checkout@v4

        - name: Set up .NET Core
          uses: actions/setup-dotnet@v4
          with:
            dotnet-version: '9.x'

        - name: Create TestResults directory
          working-directory: DomainTests
          run: |
            Remove-Item -Recurse -Force "./TestResults" -ErrorAction SilentlyContinue
            New-Item -ItemType Directory -Path "./TestResults" -Force
            Write-Host "✅ Created fresh TestResults directory"
          shell: pwsh

        - name: Run Tests with Coverage - Domain
          working-directory: DomainTests
          run: |
            dotnet test --configuration Release `
              /p:CollectCoverage=true `
              /p:CoverletOutputFormat=cobertura `
              /p:CoverletOutput="./TestResults/coverage.cobertura.xml"

        - name: Find and Move Coverage File
          working-directory: DomainTests
          run: |
            # Find the coverage file in any subdirectory
            $coverageFile = Get-ChildItem -Path "./TestResults" -Recurse -Filter "coverage.cobertura.xml" | Select-Object -First 1
        
            if (-not $coverageFile) {
              Write-Error "❌ No coverage.cobertura.xml file found in TestResults!"
              Write-Host "Contents of TestResults:"
              Get-ChildItem -Path "./TestResults" -Recurse
              exit 1
            }
        
            Write-Host "✅ Found coverage file at: $($coverageFile.FullName)"
        
            # Move it to the root TestResults directory
            Move-Item -Path $coverageFile.FullName -Destination "./TestResults/coverage.cobertura.xml" -Force
        
            # Verify the moved file
            if (-not (Test-Path "./TestResults/coverage.cobertura.xml")) {
              Write-Error "❌ Failed to move coverage file to root TestResults!"
              exit 1
            }
          shell: pwsh

        - name: Install ReportGenerator
          run: dotnet tool install --global dotnet-reportgenerator-globaltool

        - name: Verify Code Coverage >= 90%
          working-directory: DomainTests
          run: |
            $coveragePath = "./TestResults/coverage.cobertura.xml"
            if (-not (Test-Path $coveragePath)) {
              Write-Error "❌ Coverage file not found at $coveragePath"
              exit 1
            }
        
            [xml]$xml = Get-Content $coveragePath
            $lineCoverage = $xml.coverage.'@line-rate'
            $percent = [math]::Round([double]$lineCoverage * 100, 2)
        
            Write-Host "🔍 Code coverage: $percent%"
        
            if ($percent -lt 90) {
              Write-Error "❌ Code coverage is below 90%: $percent%"
              exit 1
            }
          shell: pwsh

        - name: Upload TestResults artifact
          uses: actions/upload-artifact@v4
          with:
            name: DomainTestResults
            path: DomainTests/TestResults
     
  buildAPI:
    runs-on: windows-latest
    needs: [buildAngular]
    permissions:
      contents: read
    
    env:
      PUBLISH_DIR: ${{ github.workspace }}\publish

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with: 
          dotnet-version: '9.x'

      - name: Build .NET solution
        run: dotnet build B3.API/B3.API.sln --configuration Release

      - name: Download Angular wwwroot artifact
        uses: actions/download-artifact@v4
        with:
          name: wwwroot
          path: B3.API/wwwroot

      - name: Publish .NET application
        shell: pwsh
        run: |
          # Ensure publish directory exists and is empty
          Remove-Item -Recurse -Force "$env:PUBLISH_DIR" -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Path "$env:PUBLISH_DIR" -Force
          
          # Publish with wwwroot preservation
          dotnet publish B3.API/B3.API/B3.API.csproj `
            -c Release `
            -o "$env:PUBLISH_DIR" `
            /p:DeleteExistingFiles=false
          
          # Manually copy wwwroot if not included
          if (-not (Test-Path "$env:PUBLISH_DIR\wwwroot")) {
              Copy-Item -Path "B3.API\wwwroot" -Destination "$env:PUBLISH_DIR\wwwroot" -Recurse -Force
          }
          
          # Verify published files
          $publishedIndex = "$env:PUBLISH_DIR\wwwroot\index.html"
          if (-not (Test-Path $publishedIndex)) {
              Write-Error "index.html missing in published output!"
              Get-ChildItem "$env:PUBLISH_DIR" -Recurse
              exit 1
          }
          if ((Get-Item $publishedIndex).Length -eq 0) {
              Write-Error "Published index.html is empty!"
              exit 1
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{ env.PUBLISH_DIR }}

  deploy:
    runs-on: windows-latest
    needs: [buildAPI, buildAngular, buildAPITest, buildApplicationTests, buildDomainTests]
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read
    
    env:
      PUBLISH_DIR: ${{ github.workspace }}\publish

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: .net-app
          path: ${{ env.PUBLISH_DIR }}

      - name: Verify downloaded files
        shell: pwsh
        run: |
          $indexPath = "$env:PUBLISH_DIR\wwwroot\index.html"
          if (-not (Test-Path $indexPath)) {
              Write-Error "index.html missing in downloaded artifact!"
              exit 1
          }
          if ((Get-Item $indexPath).Length -eq 0) {
              Write-Error "Downloaded index.html is empty!"
              exit 1
          }

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_8DB310D194E549EDAEE63FFD4ACCE025 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_2A355AA9F62F4B6D8BE19857D3969D56 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_DC15C30FD6CC4D6A8B1A793499BC115F }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'B3'
          slot-name: 'Production'
          package: ${{ env.PUBLISH_DIR }}